.program miolink_pico_target_swd
.side_set 2 opt

; Pin mapping for this program:
; IN - TMS
; OUT - TMS
; Side-set - pin 0 is TMS_DIR (to change the external level shifter direction), pin 1 is TCK.
; Set - TMS (to change direction through set pindirs).

; Autopull should be enabled, with a threshold of 32,
; except for the swd_adiv5_raw_access_req command, where the autopull threshold should be 8
; to save 1 cycle on the "out null, 32" instruction.
; Autopush should be enabled, with a threshold of 32,
; except for the swd_adiv5_raw_access_req command, where the autopush threshold should be 3
; to save 1 cycle on the "push" after reading the ACK.
; Additional 3 delay cycles reduce the time spent on non-data instructions, but at the same time
; limit the maximum interface frequency, in our case (3 additional delay cycles after each edge),
; to the level of sys_clk / 8, since 3 + 1 + 3 + 1 = 8.

.wrap_target ; start of the program

swd_start_prog:     ; program start
    out pc, 32      ; wait for the next command

swd_seq_out_turnaround_in_to_out:   ; TMS turnaround from input to output state
    set pindirs, 1 side 3 [2]       ; set TMS_DIR to 1 (level shifter - output), TMS direction to output
                                    ; and a rising edge on TCK, 3 = 0b11, so TMS_DIR is 1 and TCK is 1

swd_seq_out:                        ; TMS sequence out program
                                    ; TMS direction should be output, and TMS_DIR state should be 1
    out x, 32                       ; load the number of cycles from TX FIFO
    swd_seq_out_loop:
        out pins, 1 side 1 [3]              ; output TMS pin state and a falling edge on TCK,
                                            ; 1 = 0b01, so TMS_DIR is 1, TCK is 0
        jmp x-- swd_seq_out_loop side 3 [3] ; decrement the cycle counter and a rising edge on TCK,
                                            ; 3 = 0b11, so TMS_DIR is 1 and TCK is 1

    pull block side 1 [2]               ; flush remaining data in OSR and a falling edge on TCK,
                                        ; 1 = 0b01, so TMS_DIR is 1, TCK is 0
    out pc, 32                          ; wait for the next command

swd_seq_in_turnaround_out_to_in:        ; TMS turnaround from output to input state
    set pindirs, 0 side 2 [2]           ; set TMS_DIR to 0 (level shifter - input), TMS direction to input
                                        ; and a rising edge on TCK, 2 = 0b10, so TMS_DIR is 0 and TCK is 1

swd_seq_in:                             ; TMS sequence in program
                                        ; TMS direction should be input, and TMS_DIR state should be 0
    out x, 32                           ; load the number of cycles from TX FIFO
    swd_seq_in_loop:
        in pins, 1 side 0 [3]              ; read TMS pin state into ISR and a falling edge on TCK,
                                           ; 0 = 0b00, so TMS_DIR is 0 and TCK is 0
        jmp x-- swd_seq_in_loop side 2 [3] ; decrement the cycle counter and a rising edge on TCK,
                                           ; 2 = 0b10, so TMS_DIR is 0 and TCK is 1

    push side 0 [2]                    ; push ISR content to RX FIFO when
                                       ; cycle counter < 32 (autopush threshold)
                                       ; and a falling edge on TCK, 0 = 0b00, so TMS_DIR is 0 and TCK is 0
    out pc, 32                         ; wait for the next command

swd_adiv5_req_turnaround_in_to_out:    ; TMS turnaround from input to output state for SWD ADIv5 request,
                                       ; this program saves at least one cycle on the "out pc, 32" instruction.
    set pindirs, 1 side 3 [2]          ; set TMS_DIR to 1 (level shifter - output), TMS direction to output
                                       ; and a rising edge on TCK, 3 = 0b11, so TMS_DIR is 1 and TCK is 1

swd_adiv5_req:                                    ; SWD ADIv5 request program (sends request and receives ACK),
                                                  ; for this command, the autopull threshold should be 8
                                                  ; and the autopush threshold should be 3.
    set x, 7                                      ; set the cycle counter, should be (number of cycles - 1).
                                                  ; Request length is 8, so set x to 8-1=7.
    swd_adiv5_req_out_loop:                       ; Send 8-bit request.
        out pins, 1 side 1 [3]                    ; output TMS pin state and a falling edge on TCK,
                                                  ; 1 = 0b01, so TMS_DIR is 1, TCK is 0
        jmp x-- swd_adiv5_req_out_loop side 3 [3] ; decrement the cycle counter and a rising edge on TCK,
                                                  ; 3 = 0b11, so TMS_DIR is 1 and TCK is 1
    set x, 2 side 1 [3]                           ; set the cycle counter for ACK (ACK length is 3 bits, so set x to 3-1=2)
                                                  ; and a falling edge on TCK, 1 = 0b01, so TMS_DIR is 1, TCK is 0

                                ; perform a turnaround cycle from output to input to read the ACK after the request
    set pindirs, 0 side 2 [3]   ; set TMS_DIR to 0 (level shifter - input), TMS direction to input
                                ; and a rising edge on TCK, 2 = 0b10, so TMS_DIR is 0 and TCK is 1

    swd_adiv5_req_ack_loop:                       ; read the acknowledgement.
        in pins, 1 side 0 [3]                     ; read TMS pin state into ISR and a falling edge on TCK,
                                                  ; 0 = 0b00, so TMS_DIR is 0 and TCK is 0
        jmp x-- swd_adiv5_req_ack_loop side 2 [3] ; decrement the cycle counter and a rising edge on TCK,
                                                  ; 2 = 0b10, so TMS_DIR is 0 and TCK is 1
    out pc, 32 side 0 [3]                         ; wait for the next command and a falling edge on TCK

swd_turnaround_in_to_out:        ; separate TMS turnaround from input to output state for seq_in_parity.
    set pindirs, 1 side 3 [3]    ; set TMS_DIR to 1 (level shifter - output), TMS direction to output
                                 ; and a rising edge on TCK, 3 = 0b11, so TMS_DIR is 1 and TCK is 1.
    out pc, 32 side 1 [3]        ; falling edge on TCK, 1 = 0b01, so TMS_DIR is 1, TCK is 0,
                                 ; and then wait for the next command.
.wrap ; program wrap to the start